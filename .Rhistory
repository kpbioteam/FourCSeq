thresh <- myCPM > 0.5
keep <- rowSums(thresh) >= 2
# Subset the rows of countdata to keep the more highly expressed genes
counts.keep <- countdata[keep,]
## Convert to an edgeR object
dgeObj <- DGEList(counts.keep)
## Perform TMM normalisation
dgeObj <- calcNormFactors(dgeObj)
## Obtain corrected sample information
sampleinfo <- read.delim("data/SampleInfo_Corrected.txt")
dgeObj
seqdata <- read.delim("/Users/katarzynamurat/Downloads/GSE65185_CuffnormFPKM.txt", stringsAsFactors = FALSE)
head(seqdata)
#countdata <- seqdata[,-(1:2)]
countdata <- seqdata[,-(1)]
# Store EntrezGeneID as rownames
rownames(countdata) <- seqdata[,1]
countdata
colnames(countdata) <- substr(colnames(countdata), 1, 7)
head(countdata)
## Calculate the Counts Per Million measure
myCPM <- cpm(countdata)
## Identify genes with at least 0.5 cpm in at least 2 samples
thresh <- myCPM > 0.5
keep <- rowSums(thresh) >= 2
# Subset the rows of countdata to keep the more highly expressed genes
counts.keep <- countdata[keep,]
## Convert to an edgeR object
dgeObj <- DGEList(counts.keep)
## Perform TMM normalisation
dgeObj <- calcNormFactors(dgeObj)
head(dgeObj)
head(dgeObj$counts)
head(dgeObj$samples)
write.csv(dgeObj$counts,file = "/Users/katarzynamurat/Downloads/RNAresults.csv")
# Store EntrezGeneID as rownames
rownames(countdata) <- seqdata[,1]
countdata
## Calculate the Counts Per Million measure
myCPM <- cpm(countdata)
myCPM
## Identify genes with at least 0.5 cpm in at least 2 samples
thresh <- myCPM > 0.5
thresh
keep <- rowSums(thresh) >= 2
keep
# Subset the rows of countdata to keep the more highly expressed genes
counts.keep <- countdata[keep,]
counts.keep
## Convert to an edgeR object
dgeObj <- DGEList(counts.keep)
dgeObj
dgeObj
counts.keep
## Convert to an edgeR object
dgeObj <- DGEList(counts.keep)
## Perform TMM normalisation
dgeObj <- calcNormFactors(dgeObj)
write.csv(dgeObj$counts,file = "/Users/katarzynamurat/Downloads/RNAresults.csv")
dgeObj <- estimateCommonDisp(dgeObj)
plotBCV(dgeObj)
dgeObj
dgeObj
head(seqdata)
#countdata <- seqdata[,-(1:2)]
countdata <- seqdata[,-(1)]
### R code from vignette source 'GOsummaries-basics.Rnw'
###################################################
### code chunk number 1: style-Sweave
###################################################
BiocStyle::latex()
###################################################
### code chunk number 2: myCodeBlock
###################################################
library(GOsummaries, quietly=TRUE)
library(vegan, quietly=TRUE)
library(ggplot2, quietly=TRUE)
###################################################
### code chunk number 3: example1
###################################################
# Define gene lists
genes1 = c("203485_at", "209469_at", "209470_s_at", "203999_at",
"205358_at", "203130_s_at", "210222_s_at", "202508_s_at", "203001_s_at",
"207957_s_at", "203540_at", "203000_at", "219619_at","221805_at",
"214046_at", "213135_at", "203889_at", "209990_s_at", "210016_at",
"202507_s_at","209839_at", "204953_at", "209167_at", "209685_s_at",
"211276_at", "202391_at", "205591_at","201313_at")
genes2 = c("201890_at", "202503_s_at", "204170_s_at", "201291_s_at",
"202589_at", "218499_at", "209773_s_at", "204026_s_at", "216237_s_at",
"202546_at", "218883_s_at", "204285_s_at", "208659_at", "201292_at",
"201664_at")
gl = list(List = list(genes1, genes2)) # Two lists per component
# Construct gosummaries objects
gs = gosummaries(gl)
plot(gs, fontsize = 8, filename = "figure2.pdf")
###################################################
### code chunk number 4: Example2
###################################################
data(tissue_example)
# Filter genes and perform k-means
sd = apply(tissue_example$exp, 1, sd)
exp2 = tissue_example$exp[sd > 0.75,]
exp2 = exp2 - apply(exp2, 1, mean)
kmr = kmeans(exp2, centers = 6, iter.max = 100)
# Create gosummaries object
exp2[1:6, 1:5]
head(tissue_example$annot)
gs_kmeans = gosummaries(kmr, components = 1:2, exp = exp2, annotation = tissue_example$annot)
plot(gs_kmeans, fontsize = 8, classes = "Tissue", filename = "figure3.pdf")
###################################################
### code chunk number 5: Example3
###################################################
cust = function(p, par){
p = p + scale_fill_brewer(par$classes, type = "qual", palette = 2)
return(p)
}
plot(gs_kmeans, panel_plot = panel_violin, panel_customize = cust,
classes = "Tissue", components = 1:2, filename = "ex3.pdf")
###################################################
### code chunk number 6: ExampleUserSupplied
###################################################
wcd1 = data.frame(Term = c("KLF1", "KLF2", "POU5F1"), Score = c(0.05, 0.001, 0.0001))
wcd2 = data.frame(Term = c("CD8", "CD248", "CCL5"), Score = c(0.02, 0.005, 0.00001))
###################################################
### code chunk number 7: ExampleUserSupplied2
###################################################
gs = gosummaries(wc_data = list(Results1 = wcd1, Results2 = wcd2))
plot(gs, filename = "figure5.pdf")
###################################################
### code chunk number 8: ExampleUserSupplied3
###################################################
# To get two word clouds per block use neted lists
gs = gosummaries(wc_data = list(Results = list(wcd1, wcd2)))
plot(gs, filename = "figure6.pdf")
###################################################
### code chunk number 9: ExampleMetagenomic
###################################################
data(metagenomic_example)
# Run Principal Coordinate Analysis on Bray-Curtis dissimilarity matrix
pcoa = cmdscale(vegdist(t(metagenomic_example$otu), "bray"), k = 3)
# By turning off the GO analysis we can show the names of taxa
gs = gosummaries(pcoa, metagenomic_example$otu, metagenomic_example$annot,
show_genes = T, gconvert_target = NULL, n_genes = 30)
plot(gs, class = "BodySite", fontsize = 8, file = "figure7.pdf")
###################################################
### code chunk number 10: SessionInfo
###################################################
sessionInfo()
BiocStyle::latex()
###################################################
### code chunk number 2: myCodeBlock
###################################################
library(GOsummaries, quietly=TRUE)
library(vegan, quietly=TRUE)
library(ggplot2, quietly=TRUE)
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("GOsummaries")
(vegany
install.packages("ggplot2")
### R code from vignette source 'GOsummaries-basics.Rnw'
###################################################
### code chunk number 1: style-Sweave
###################################################
BiocStyle::latex()
###################################################
### code chunk number 2: myCodeBlock
###################################################
library(GOsummaries, quietly=TRUE)
library(vegan, quietly=TRUE)
library(ggplot2, quietly=TRUE)
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("GOsummaries")
### R code from vignette source 'GOsummaries-basics.Rnw'
###################################################
### code chunk number 1: style-Sweave
###################################################
BiocStyle::latex()
###################################################
### code chunk number 2: myCodeBlock
###################################################
library(GOsummaries, quietly=TRUE)
library(vegan, quietly=TRUE)
library(ggplot2, quietly=TRUE)
## try http:// if https:// URLs are not supported
source("https://bioconductor.org/biocLite.R")
biocLite("GOsummaries")
###################################################
### code chunk number 3: example1
###################################################
# Define gene lists
genes1 = c("203485_at", "209469_at", "209470_s_at", "203999_at",
"205358_at", "203130_s_at", "210222_s_at", "202508_s_at", "203001_s_at",
"207957_s_at", "203540_at", "203000_at", "219619_at","221805_at",
"214046_at", "213135_at", "203889_at", "209990_s_at", "210016_at",
"202507_s_at","209839_at", "204953_at", "209167_at", "209685_s_at",
"211276_at", "202391_at", "205591_at","201313_at")
genes2 = c("201890_at", "202503_s_at", "204170_s_at", "201291_s_at",
"202589_at", "218499_at", "209773_s_at", "204026_s_at", "216237_s_at",
"202546_at", "218883_s_at", "204285_s_at", "208659_at", "201292_at",
"201664_at")
gl = list(List = list(genes1, genes2)) # Two lists per component
# Construct gosummaries objects
gs = gosummaries(gl)
plot(gs, fontsize = 8, filename = "figure2.pdf")
###################################################
### code chunk number 4: Example2
###################################################
data(tissue_example)
# Filter genes and perform k-means
sd = apply(tissue_example$exp, 1, sd)
exp2 = tissue_example$exp[sd > 0.75,]
exp2 = exp2 - apply(exp2, 1, mean)
kmr = kmeans(exp2, centers = 6, iter.max = 100)
# Create gosummaries object
exp2[1:6, 1:5]
head(tissue_example$annot)
gs_kmeans = gosummaries(kmr, components = 1:2, exp = exp2, annotation = tissue_example$annot)
plot(gs_kmeans, fontsize = 8, classes = "Tissue", filename = "figure3.pdf")
###################################################
### code chunk number 5: Example3
###################################################
cust = function(p, par){
p = p + scale_fill_brewer(par$classes, type = "qual", palette = 2)
return(p)
}
plot(gs_kmeans, panel_plot = panel_violin, panel_customize = cust,
classes = "Tissue", components = 1:2, filename = "ex3.pdf")
###################################################
### code chunk number 6: ExampleUserSupplied
###################################################
wcd1 = data.frame(Term = c("KLF1", "KLF2", "POU5F1"), Score = c(0.05, 0.001, 0.0001))
wcd2 = data.frame(Term = c("CD8", "CD248", "CCL5"), Score = c(0.02, 0.005, 0.00001))
###################################################
### code chunk number 7: ExampleUserSupplied2
###################################################
gs = gosummaries(wc_data = list(Results1 = wcd1, Results2 = wcd2))
plot(gs, filename = "figure5.pdf")
###################################################
### code chunk number 8: ExampleUserSupplied3
###################################################
# To get two word clouds per block use neted lists
gs = gosummaries(wc_data = list(Results = list(wcd1, wcd2)))
plot(gs, filename = "figure6.pdf")
###################################################
### code chunk number 9: ExampleMetagenomic
###################################################
data(metagenomic_example)
# Run Principal Coordinate Analysis on Bray-Curtis dissimilarity matrix
pcoa = cmdscale(vegdist(t(metagenomic_example$otu), "bray"), k = 3)
# By turning off the GO analysis we can show the names of taxa
gs = gosummaries(pcoa, metagenomic_example$otu, metagenomic_example$annot,
show_genes = T, gconvert_target = NULL, n_genes = 30)
plot(gs, class = "BodySite", fontsize = 8, file = "figure7.pdf")
###################################################
### code chunk number 10: SessionInfo
###################################################
sessionInfo()
plot(gs, class = "BodySite", fontsize = 8, file = "figure7.pdf")
###################################################
### code chunk number 3: example1
###################################################
# Define gene lists
genes1 = c("203485_at", "209469_at", "209470_s_at", "203999_at",
"205358_at", "203130_s_at", "210222_s_at", "202508_s_at", "203001_s_at",
"207957_s_at", "203540_at", "203000_at", "219619_at","221805_at",
"214046_at", "213135_at", "203889_at", "209990_s_at", "210016_at",
"202507_s_at","209839_at", "204953_at", "209167_at", "209685_s_at",
"211276_at", "202391_at", "205591_at","201313_at")
genes2 = c("201890_at", "202503_s_at", "204170_s_at", "201291_s_at",
"202589_at", "218499_at", "209773_s_at", "204026_s_at", "216237_s_at",
"202546_at", "218883_s_at", "204285_s_at", "208659_at", "201292_at",
"201664_at")
gl = list(List = list(genes1, genes2)) # Two lists per component
# Construct gosummaries objects
gs = gosummaries(gl)
plot(gs, fontsize = 8, filename = "figure2.pdf")
pdf("/Users/katarzynamurat/Downloads/file.pdf",width=6,height=4)
plot(gs, fontsize = 8)
dev.off()
pdf("/Users/katarzynamurat/Downloads/file1.pdf",width=6,height=4)
plot(gs_kmeans, fontsize = 8, classes = "Tissue", filename = "figure3.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file2.pdf",width=6,height=4)
plot(gs_kmeans, panel_plot = panel_violin, panel_customize = cust,
classes = "Tissue", components = 1:2, filename = "ex3.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file3.pdf",width=6,height=4)
plot(gs, filename = "figure5.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file2.pdf",width=6,height=4)
plot(gs_kmeans, panel_plot = panel_violin, panel_customize = cust,
classes = "Tissue", components = 1:2, filename = "ex3.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file3.pdf",width=6,height=4)
plot(gs, filename = "figure5.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file4.pdf",width=6,height=4)
plot(gs, filename = "figure6.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file5.pdf",width=6,height=4)
plot(gs, class = "BodySite", fontsize = 8, file = "figure7.pdf")
dev.off()
gs
###################################################
### code chunk number 9: ExampleMetagenomic
###################################################
data(metagenomic_example)
# Run Principal Coordinate Analysis on Bray-Curtis dissimilarity matrix
pcoa = cmdscale(vegdist(t(metagenomic_example$otu), "bray"), k = 3)
?vegdist
??vegdist
###################################################
### code chunk number 9: ExampleMetagenomic
###################################################
data(metagenomic_example)
library(vegan, quietly=TRUE)
install.packages("vegan")
library(vegan, quietly=TRUE)
# Run Principal Coordinate Analysis on Bray-Curtis dissimilarity matrix
pcoa = cmdscale(vegdist(t(metagenomic_example$otu), "bray"), k = 3)
# By turning off the GO analysis we can show the names of taxa
gs = gosummaries(pcoa, metagenomic_example$otu, metagenomic_example$annot,
show_genes = T, gconvert_target = NULL, n_genes = 30)
pdf("/Users/katarzynamurat/Downloads/file5.pdf",width=6,height=4)
plot(gs, class = "BodySite", fontsize = 8, file = "figure7.pdf")
dev.off()
pdf("/Users/katarzynamurat/Downloads/file.pdf",width=3,height=2)
plot(gs, fontsize = 8)
dev.off()
gs
pdf("/Users/katarzynamurat/Downloads/file.pdf",width=3,height=2)
plot(gs, fontsize = 8)
dev.off()
pdf("/Users/katarzynamurat/Downloads/file.pdf")
plot(gs, fontsize = 8)
dev.off()
pdf("/Users/katarzynamurat/Downloads/file.png")
plot(gs, fontsize = 8)
dev.off()
pdf("/Users/katarzynamurat/Downloads/file.png")
plot(gs, fontsize = 8)
dev.off()
pdf("/Users/katarzynamurat/Downloads/file.jpg")
plot(gs, fontsize = 8)
dev.off()
plot(gs, fontsize = 8, filename = "/Users/katarzynamurat/Downloads/file.pdf")
plot(gs, fontsize = 8, filename = "/Users/katarzynamurat/Downloads/filev1.pdf")
plot(gs, fontsize = 8, filename = "/Users/katarzynamurat/Downloads//Users/katarzynamurat/Downloads/figure1.pdf")
plot(gs, fontsize = 8, filename = "/Users/katarzynamurat/Downloads//Users/katarzynamurat/Downloads/file1.pdf")
plot(gs, fontsize = 8, filename = "/Users/katarzynamurat/Downloads//Users/katarzynamurat/Downloads/file.pdf")
plot(gs, fontsize = 8, filename = "/Users/katarzynamurat/Downloads/figure1.pdf")
plot(gs_kmeans, fontsize = 8, classes = "Tissue", filename = "/Users/katarzynamurat/Downloads/figure3.pdf")
plot(gs_kmeans, panel_plot = panel_violin, panel_customize = cust,
classes = "Tissue", components = 1:2, filename = "/Users/katarzynamurat/Downloads/ex3.pdf")
plot(gs, filename = "/Users/katarzynamurat/Downloads/figure5.pdf")
plot(gs, filename = "/Users/katarzynamurat/Downloads/figure6.pdf")
plot(gs, class = "BodySite", fontsize = 8, file = "/Users/katarzynamurat/Downloads/figure7.pdf")
tissue_example
# Filter genes and perform k-means
sd = apply(tissue_example$exp, 1, sd)
sd
gs_kmeans
kmr
exp2
tab <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
tab <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
tab$gene_name
gl <- tab$gene_name
gs = gosummaries(gl)
tab <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
gl <- tab[,1]
gl
tab <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
gl <- tab[,1]
gl
tab <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
gl <- tab[,1]
gl
gs = gosummaries(gl)
gl <- c(tab[,1])
gl
tab
gl <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
gs = gosummaries(gl)
gl
gl <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
gs = gosummaries(gl)
tab <- read.delim("/Users/katarzynamurat/Downloads/annotab.txt")
tab <- read.table("/Users/katarzynamurat/Downloads/annotab.txt")
gl <- tab$V1
gs = gosummaries(gl)
gl <- c(tab$V1)
gs = gosummaries(gl)
# Construct gosummaries objects
gs = gosummaries(gl, organism = "hsapiens")
mapToGenome
require("minfi", quietly = TRUE)
mapToGenome
mapToGenome
??mapToGenome
?mapToGenome
mapToGenome()
mapToGenome
showMethods("mapToGenome")
system.file("extdata/python/demultiplex.py", package="FourCSeq")
library(FourCSeq)
referenceGenomeFile = system.file("extdata/dm3_chr2L_1-6900.fa",
package="FourCSeq")
referenceGenomeFile
## [1] "/tmp/RtmpZKRQPk/Rinst5d63188339ad/FourCSeq/extdata/dm3_chr2L_1-6900.fa"
bamFilePath = system.file("extdata/bam",
package="FourCSeq")
bamFilePath
## [1] "/tmp/RtmpZKRQPk/Rinst5d63188339ad/FourCSeq/extdata/bam"
primerFile = system.file("extdata/primer.fa",
package="FourCSeq")
primerFile
## [1] "/tmp/RtmpZKRQPk/Rinst5d63188339ad/FourCSeq/extdata/primer.fa"
writeLines(readLines(primerFile))
#Initialization of the FourC object
metadata <- list(projectPath = "exampleData",
fragmentDir = "re_fragments",
referenceGenomeFile = referenceGenomeFile,
reSequence1 = "GATC",
reSequence2 = "CATG",
primerFile = primerFile,
bamFilePath = bamFilePath)
colData <- DataFrame(viewpoint = "testdata",
condition = factor(rep(c("WE_68h", "MESO_68h", "WE_34h"),
each=2),
levels = c("WE_68h", "MESO_68h", "WE_34h")),
replicate = rep(c(1, 2),
3),
bamFile = c("CRM_ap_ApME680_WE_6-8h_1_testdata.bam",
"CRM_ap_ApME680_WE_6-8h_2_testdata.bam",
"CRM_ap_ApME680_MESO_6-8h_1_testdata.bam",
"CRM_ap_ApME680_MESO_6-8h_2_testdata.bam",
"CRM_ap_ApME680_WE_3-4h_1_testdata.bam",
"CRM_ap_ApME680_WE_3-4h_2_testdata.bam"),
sequencingPrimer="first")
fc <- FourC(colData, metadata)
setwd("/Users/katarzynamurat/Documents/4Cseq")
save(fc,file = 'fcdata.rdata')
#Fragment reference
fc <- addFragments(fc)
rowRanges(fc)
findViewpointFragments(fc)
fc <- addViewpointFrags(fc)
colData(fc)$chr = "chr2L"
colData(fc)$start = 6027
colData(fc)$end = 6878
fc <- countFragmentOverlaps(fc, trim=4, minMapq=30)
fc <- combineFragEnds(fc)
assays(fc)
head(assay(fc, "counts"))
data(fc)
metadata(fc)$projectPath
metadata(fc)$projectPath <- "exampleData"
writeTrackFiles(fc)
writeTrackFiles(fc, format='bedGraph')
fc <- smoothCounts(fc)
plotScatter(fc[,c("ap_WE_68h_1", "ap_WE_68h_2")],
xlab="Replicate1", ylab="Replicate2", asp=1)
fcf <- getZScores(fc)
zScore <- assay(fcf, "zScore")
hist(zScore[,"ap_MESO_68h_1"], breaks=100)
#qqnorm(zScore[,"ap_MESO_68h_1"],
#     main="Normal Q-Q Plot - ap_MESO_68h_1")
#abline(a=0, b=1)
fcf <- addPeaks(fcf, zScoreThresh=3, fdrThresh=0.01)
plotFits(fcf[,1], main="")
###########################################################
library(TxDb.Dmelanogaster.UCSC.dm3.ensGene)
plotZScores(fcf[,c("ap_WE_68h_1", "ap_WE_68h_2")],
txdb=TxDb.Dmelanogaster.UCSC.dm3.ensGene)
## [1] "ap"
## Successfully plotted results.
###Detecting differences
fcf <- getDifferences(fcf,
referenceCondition="WE_68h")
plotDispEsts(fcf)
plotNormalizationFactors(fcf)
plotMA(results(fcf, contrast=c("condition", "WE_68h", "MESO_68h")),
alpha=0.01,
xlab="Mean 4C signal",
ylab="log2 fold change",
ylim=c(-3.1,3.1))
results <- getAllResults(fcf)
dim(results)
## [1] 1872 16
head(results)[,1:6]
plotDifferences(fcf,
txdb=TxDb.Dmelanogaster.UCSC.dm3.ensGene,
plotWindows = 1e+05,
textsize=16)
apId <- "FBgn0000099" #flybase gene id of the ap gene is "FBgn0000099"
apGene <- genes(TxDb.Dmelanogaster.UCSC.dm3.ensGene,
filter=list(gene_id=apId))
apPromotor <- promoters(apGene, upstream = 500, downstream=100)
frags <- rowRanges(fcf)
if(length(frags) != nrow(results))
stop("Number of rows is not the same for the fragment data and results table.")
ov <- findOverlaps(apPromotor, frags)
results[subjectHits(ov),1:6]
fc <- get(load('fcdata.rdata'))
fc
fc <- addFragments(fc)
fc <- get(load('fcdata.rdata'))
fc <- countFragmentOverlaps(fc, trim=4, minMapq=30)
save(fc,file = output)
